Programozzunk mikrokontrollert (jelen esetben PIC-et) USB kábellel !

Mi kell egy PIC-es áramkör programozásához ?


1. Kozervatív változat. Ez adja a legnagyobb szabadságot a PIC lehetőségeinek kihasználásához. Csak a szabadsággal élni is kell tudni :)
    Maga a PIC-es áramkör. Az összes PIC variáns használható.
    Fordítóprogram. Ez lehet többféle, akár Microchip saját programjait FlowCode-ot, de sok más fordító programot is használhatunk.
    PIC programozó. Itt is több lehetőségünk van. Microchip eredeti (ICD, PICKIT-ek) egészen a JDM-ig :(
    Idő. Jó sok. Megírom, lefordítom, beégetem, kipróbálom, elgondolkodom, miért nem működik, aztán megírom, lefordítom,....

2. Kicsit kötöttebb változat. Lemondok a PIC-ek nagyrészéről és csak PIC32-ket használok.  
    Maga a PIC-es áramkör. Ebben az esetben bootloaderrel feltöltött PIC32-vel. 
      Esetleg komplett kártyával. pl.: Fubarino sorozat, ChipKit sorozat. 
      Vagy csak egy bootloaderrel feltöltve vásárolt PIC32MX250F128B DIP tokozású IC és 8-10 passzív alkatrész !
    MPIDE fejlesztő környezet. A hozzá elérhető rengeteg használatra kész könyvtárral, 
      amikben szinte minden fontos periféria kezelése meg van oldva.
    Egy USB kábel a program betöltéshez. (Nem kell külön programozó !)
    Idő. Kevesebb, mint fent, köszönhetően a könyvtáraknak és a kötöttebb fejlesztő környezetnek. 
      De a menetrend itt is hasonló: Megírom, lefordítom, betöltöm, kipróbálom, ....
  
  
3. Abszolút kötött változat. 
    Előkészületek:
      MPIDE-re alapul, tehát a HW ugyanaz, mint fent.  
      Lefordítom, betöltöm az értelmező programot. Nincs hibakeresés, az már elvégezték mások helyettem !
      Jelenleg a következő interpreterekről van tudomásom/tapasztalatom:
        Rich Testardi StickOS elnevezésű BASIC rendszere: http://www.cpustick.com/
          Nem minden PIC32-t támogat, tartalmaz zárt, szabadalommal védett kódrészeket, ezért más kontrollerre nehezen adaptálható.
          A korlátozott kódhozzáférés ellenére sikerült a 32MX250F128 kontrollerre is lefordítani.
          Fordításához MPLAB-X + XC32-re van szükség.
        Luboš Pěkný DIOS Forth rendszere: http://www.forth.cz/Download/DIOSForth/DIOSForth.html
          Nyílt forráskódú, az eredeti változat csak PIC32MX795 kontrollereken működik.
          Fordításához MPLAB 8.83, C32 2.02, gcc 4.5.1. szükséges.
          Nem támogatja az USB kapcsolatot.
        CKF: https://github.com/jvvood/ChipKitForth
          Nyílt forráskódú. A DIOS Forth-ból lett tovább fejlesztve.
          Fordításához MPIDE szükséges.
          Kisebb igazításokkal a teljes (USB képességekkel rendelkező) PIC32MX sorozaton használható.
          Az alaprendszert ChipKit DP32 (PIC32MX250F128B) és Fubarino SD (PIC32MX795F512L) kártyával is kipróbáltam.
    Tényleges programozás:
      Szükséges az interpreterrel felprogramozott PIC-es áramkör, USB kábel, 
      soros terminál emulátor, jól jöhet egy szövegszerkesztő is.
      Összekötöm, bekapcsolom, elkezdem írni a programot. 
      Közvetlenül a PIC-be ! (Annak is a RAM-jába.) 
      Ha hülyeséget írok be, rögtön magkapom a hibaüzenetet !
      Ha egy programrészről úgy vélem, elkészültem vele elmentem. A PIC RAM-jából a PIC FLASH-ébe !
      Ha sikerül kiakasztani a programot, megnyomom a RESET gombot és folytatom tovább.
      Ha készen van a program, akkor beállítom, hogy ezentúl RESET után ne az interpreter interaktív része induljon el, 
      hanem maga a megírt programom. Ha mégis változtatni akarok, akkor reset után leütöm néhányszor az ESC gombot 
      és máris a fejlesztő rendszerbe jutok.
      
Már hallani vélem az ellenérvek sorozatát.
Előre leszögezem, a fentiek a mikrokontroller programozással hobbiként foglalkozó, 
a témában inkább kezdőnek, mint profinak számító felhasználóknak szólnak.

A PIC32 drágább !
  Listaáron a PIC32MX250F128B bootloaderrel olcsóbb, mint az elterjed 18F2550.
  (Azért a 18F2550-el hasonlítottam össze, mert arra is létezik Forth interpreter.)
  (Tudom vannak sokkal olcsóbb PIC-ek is, de almát almával, körtét körtével!)
Az interpreter sokkal lassabb !
  1. Mivel MPIDE-re alapul, ezért az abban megírt könyvtárak az eredeti sebességgel futnak.
  2. Egy kis összehasonlítás:
     Gépikód      PIC32MX7 sorozaton 80 MHz órajel mellett:   80_000_000 utasítás/másodperc.
     Gépikód      PIC32MX2 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
     StickOS      PIC32MX7 sorozaton 80 MHz órajel mellett:      113_000 utasítás/másodperc.
     StickOS      PIC32MX2 sorozaton 40 MHz órajel mellett:       61_000 utasítás/másodperc.
     DIOS Forth   PIC32MX7 sorozaton 80 MHz órajel mellett:    2_300_000 utasítás/másodperc.
     CKF          PIC32MX2 sorozaton 40 MHz órajel mellett:      760_000 utasítás/másodperc.

     Az egyszerűbb összehasonlításhoz számoljuk át az értékeket 40 MHz órajelre:
     Gépikód      PIC32MX7 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
     Gépikód      PIC32MX2 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
     StickOS      PIC32MX7 sorozaton 40 MHz órajel mellett:       56_500 utasítás/másodperc.
     StickOS      PIC32MX2 sorozaton 40 MHz órajel mellett:       61_500 utasítás/másodperc.
     DIOS Forth   PIC32MX7 sorozaton 40 MHz órajel mellett:    1_150_000 utasítás/másodperc.
     CKF          PIC32MX2 sorozaton 40 MHz órajel mellett:    1_245_000 utasítás/másodperc.

     Hányszor gyorsabb a gépikód a BASIC programnál:
       Gépikód/Basic:       677 
     Hányszor gyorsabb a gépikód a FORTH programnál:
       Gépikód/DIOSForth:    34
       Gépikód/ChipKitForth: 32
     Hányszor gyorsabb FORTH program a BASIC programnál:
       DIOSForth/Basic:      19
       ChipKitForth/Basic:   21
  3. Ezzel a kifogással csak az támadjon, aki kezdőként gyakrabban akadt bele abba a problémába, 
     hogy hogyan spóroljon meg néhány milliomod másodperc időt, mint abba, hogy melyik regiszter melyik bitjét mikor mire kell állítani !
  
A Forth nyelvet nehéz megtanulni!
 A Lisp-et is! Egyébként nem olyan nehéz, egy kicsit ki kell lépnünk a komfortzónánkból és áldozni kell rá egy kis energiát, menni fog !
 Főleg egy interaktív környezetben, ahol a hibák azonnal kiderülnek, 
 és kis lépésekkel haladva a tanulásban gyakori sikerélmények fokozzák a motivációt.
 
C nyelven sokkal több könyvtári rutin érhető el !
  Mivel a CKF MPIDE alatt van lefordítva, ezért aki kész C könyvtárat akar használni, nosza rajta lehet implementálni CKF-be.
  A "Wire" (I2C) könyvtár CKF-be illesztése kb 2 órányi feladat. Ettől kezdve viszont natív Forth utasításokkal lehet használni.
  
A Forth-ban nincsenek megszakítások!
  De ebben vannak! Tessék megnézni a GitHub-on az "Examples" könyvtár példaprogramjait !
  Például CKF-ben a PinChangeNotification megszakítás működik a PIC32MX2-es sorozaton, 
  ellenben az MPIDE eredeti könyvtárával, ahol még nem oldották meg. Ha sok időm lesz, majd besegítek oda is.
  
Ha elakadok nincs kitől segítséget kérni!
  De van. Én. És remélem egyre többen leszünk !
  
Nincs kódvédelem!
  Valóban nincs. Ez filozófia kérdése. Egy ingyenes nyílt forráskódú fejlesztő rendszerrel előállított program lehetőségek
  szerint maga is legyen nyílt. Ugyanakkor másolás ellen lehet védekezni többféleképpen is. De azt tudni kell, hogy megkerülhetetlen 
  másolásvédelem nem létezik. Csak idő és pénz kérdése. Azt viszonylag egyszerű módszerekkel is el lehet érni, hogy annyi időbe, pénzbe 
  kerüljön a másolás, hogy ne érje meg. Egyébként aki egy tokenizált basic vagy forth programot visszafejt, az a visszafejtésre fordított
  energia töredékével újra megírhatja a funkcionálisan egyenértékű programot.   
  
  
  
  
