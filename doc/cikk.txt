
A mikrokontrollerek fejlődése jelenleg hatalmas léptekben zajlik. Az a teljesítmény, memória méret, ami néhány 10 évvel ezelőtt
az asztali számítógépekben a csúcsnak számított, manapság már egy közepes kategóriájú mikrokontrollerben megtalálható. 
Nem mellesleg a rohamos fejlesztés azzal jár, hogy egyre kevesebb pénzért egyre nagyobb teljesítményt tudunk megvenni.
A programfejlesztés módszere azonban maradt a régi.

Egy program fejlesztése fordítóprogram használatával a következő lépésekben történik:
(A megelőző tervezési fázisok, döntések meghozatala után.)

1. Forrásszöveg szerkesztése.
2. A program szövegből fordító program, linker segítségével 
   a mikrokontroller által végrehajtható "tárgykód" készítése.
   Ha a forításkor hibaüzenetet kapunk, akkor GOTO 1.
3. A tárgykód "beégetése, beírása" a mikrokontroller memóriájába vagy betöltése egy szimulátorba.
4. A program futtatása, tesztelése.
5. A tesztelés eredményének elemzése:
   Megfelelően működik vagy nem. (Általában elsőre nem :)
6. Ha a tesztelésnél minden rendben, akkor kész a program, ha hibás működést tapasztalunk, akkor GOTO 1.
A fentieket addig kell újra és újra végrehajtani, míg az elvárt eredményt el nem érjük.   
Az ismétlések száma még profi programfejlesztőknél sem 0 az esetek nagy részében.
A nem profi fejlesztőknél az ismétlések száma a több 10-et is elérheti.

Az ismeretett fejlesztési modellnek több hátránya is tetten érhető:
1. A többszöri fordítás/szerkesztés/égeté/tesztelés rendkívül időigényes lehet.
2. Esetenként komoly eszközigénye lehet: programozó hibakereső hardver. 
   A programozó hardver az esetek egy részében kiváltható az un. bootloader használatával. 
   Ez egy kis program a mikrokontrollerben, ami a PC-ken meglévő 
   valamilyen kommunikációs csatlakozást (pl.: valódi vagy emulált soros port) felhasználva oldja meg 
   a programnak a mikrokontroller memóriájába írását.
3. Gyártó specifikusak. Esetenként az ingyenesen használható változatok különböző korlátozásokat tartalamznak.   

Kétségtelen előnye viszont, hogy a mikrokontroller lehetségeinek maximális kihasználására is lehetőséget ad.

Az idők folyamán különböző indíttatástól vezérelve létrejöttek 
alternatív - nem mikrokontroller gyártóhoz kötődő - fejlesztő eszközök is. 
Ilyen például az AVR-ekhez használható ARDUINO. Ez olyannyira népszerű lett, hogy egyre-másra születtek
a klónjai: Pinguino, ENERGIA-IDE, MPIDE. 
Ezekben közös, hogy a program betöltést bootloader segítségével oldják meg, 
valamint kiterjedt és a felhasználók által folyamatosan bővített újrafelhasználható un. könyvtárakat tartalmaznak. 
Egy könyvtár általában egy adott feladat megoldásához vagy adott fizikai csatoló áramkör kezeléséhez szükséges
programrészleteket tartalmazzák. Ezeknek a könyvtáraknak a felhasználásával LEGO szerűen 
összerakhatjuk a saját alkalmazásunkban szükséges programkódok egy részét. Például egy LCD kijelző használatához a kijelzőről jóformán
elegendő annyit tudnunk, hogy melyik kivezetését hova kell kötnünk. Ha ezt megettük, az LCD könyvtár felhasználásával
írhatunk, rajzolhatunk a kijelzőre anélkül, hogy tudnunk kellene, a háttérben milyen folyamatok segítik ezt.

Véleményem szerint a mikrokontrollerek teljesítmény/ár aránya és maga a nyers teljesítménye valamit az elérhető memória méretek
a közelmúltban átlépték azt a határt, amikor már érdemes lehet a hagyományos programfejlesztési modelt felülvizsgálni.
Ez nem azt jelenti, hogy forrdalmian új dolgokat kell kitalálni, hanem az elődök által már létrehozott, 
de eddig háttérbe szorult módszereket érdemes lehet újra elővenni. 
Mire gondolok ? Arra, hogy a programkészítés egyes lépéseit már rá lehet bízni magára a mikrokontrollerre is.
Ennek van egy régóta használatos megoldása az un. értelmező programok használata. A korosabb olvasók még bizonyára emlékeznek
a Sinclair, Commodore számítógépekre. Ezeket a felhasználó alapesetben BASIC nyelven progamozhatta. A megírt BASIC programot
a számítógépen futó értelmező program hajtotta végre. Ennek a módszernek hatalmas előnye az interaktivitás. Ez azt jelenti, hogy
a készülő programunk részleteit kvázi valós időben tudjuk tesztelni ! Ha tartjuk magunkat ahhoz a módszerhez, hogy a programunkat
kicsiny, elemi feladatokat önállóan elvégző részek összekapcsolásával hozzuk létre akkor egy ilyen elemi programrészt megírva, 
tesztelve a későbbiekben azt mintegy építőkockát tudjuk felhasználni a teljes program összeállításakor. 
Az építőkockák készítésekor nem kell a cikk elején leírt többszörös szerkesztés/fordítás/beégetés sorozatot sem végrehajtani.

Az ilyen értelmező programok használatának nagy hátránya, hogy a számítógép erőforrásainak
jelentős részét felhasználta maga az értelmező program. A felhasználó programja a CPU teljesítményének, a rendelkezésre álló memóriának
csak néhány százalékát tudta a saját programja számára felhasználni.

A mikrokontrollerek hőskorában is voltak interpeteres rendszerek elterjesztésére próbálkozások. Ilyen volt a 8052AH-BASIC.
Sajnos a minimális rendszer is 3 integrált áramkörből állt. Ha nem szerettük volna a megírt programunkat elveszteni a kikapcsoláskor,
akkor még egy komplett EPROM égetőt is kellett a rendszerhez illeszteni. Ennek ellenére nem volt teljes kudarc ez a projekt sem.

A mikrokontrollerek mai fejlettségi szintjén már ez a néhány százalék is igen jelentős teljesítményt jelent !
Olyannyira, hogy a különböző fórumokon felvetett hobbi kategóriájú fejlesztések nagy részére elegendő !
Az sem utolsó szempont, főleg a mikrokontrollerek programozásával még csak ismerkedők számára 
nagyon rövid idő alatt sikerélményt tud nyújtani, ezzel motiválva a továbbhaladásra.
Ez igen széles tartományt lefed kezdve a 7 LED-es elektronikus dobókockától az egyszerűbb robot vezérlésen keresztül az 
intelligens házvezérlésig.

Erre már vannak gyakorlati megvalósítások is. Kiemelném ezek közül Rich Testardi StickOS elnevezésű BASIC rendszerét: http://www.cpustick.com/
A StickOS elérhető több különböző mikrokontrollerre köztük a hazánkban is népszerű PIC család 32 bites tagjaira is.

Ez a mikrokontroller család nemrégiben bővült az alsó szegmens felé is a PIC32MX1, PIC32MX2-es sorozattal.
A PIC-ekkel foglalkozó forumok szorgalmas olvasgatása után azt kell mondanom, hogy a hobbi szinten, a mikrokontrollerekkel csak ismerkedő
fórumozók szinte nem is tudnak erről a sorozatról !
Pedig szerintem érdemes ezeket is számításba venni egy-egy projekt elindításakor. Ugyanis a PIC-ek hazai 
forgalmazójánál ~1000-1500 Ft-os bruttó áron beszerezhetőek (PIC32MX250F128B).
Ezért az összegért kapunk 128K FLASH, 32K RAM memóriát, USB interfészt, gyárilag beégetett USB-t használó bootloadert. 
Programfejlesztéshez használhatjuk az ingyenes, korlátozásoktól mentes MPIDE fejlesztő környezetet 
az elterjedt operációs rendszereken: WIN, Linux, MacOS a ChipKit-től.
Egy dugdosós próbapanelen néhány passzív alkatrész felhasználásával 
egy komplett működő rendszert lehet összeállítani: http://chipkit.net/tag/breadboard/ 
(Google fordításban:http://translate.google.hu/translate?sl=en&tl=hu&js=n&prev=_t&hl=hu&ie=UTF-8&u=http%3A%2F%2Fchipkit.net%2Ftag%2Fbreadboard%2F)
Összehasonlításul: a népszerű 18F2550 mikrokontroller hasonló áron 32K FLASH, 2K RAM memóriát tartalmaz, és nincs benne az USB bootloader,
tehát még valamilyen programozóra is szükség van.


A fordító és értelmező programok között azonban van egy köztes szint is. Erre egy jó példa a méltatlanul háttérbe szorult
FORTH programozási nyelv. FORTH rendszer elérhető a mikrokontrollerek egy részére is. A teljesség igénye nélkül:
8 bites AVR-ekre: 
  AmForth http://amforth.sourceforge.net/
  FLASHFORTH http://flashforth.sourceforge.net/
8 bites PIC-ekre: 
  PICForth http://tinymicros.com/wiki/PICForth
8 és 16 bites PIC-ekre:
  FLASHFORTH http://flashforth.sourceforge.net/

32 bites PIC-ek közül azonban csak a legnagyobbakra (PIC32mx795) érhető el a DIOS Forth. A DIOS Forth-ot csak soros porton keresztül lehet 
használni, amihez újabb hardver elemekre van szükség. (USB-UART átalakító vagy USB-RS232 átalakító+RS232-UART illesztő)

Miért a FORTH ?
Engem különleges viszony fűz a FORTH nyelvhez. Még a 80-as évek végén ismertem meg a szokásos BASIC, Assembly utat követően.
Az ragadott meg benne, hogy a programfejlesztés nem igényelt a FORTH rendszeren kívül más szoftver és hardver komponenst. 
(Természetesen egy szövegszerkesztő jól tud jönni, de elég egy "notepad" képességű is.)
A programfejlesztés az akkori körülmények között nagyságrendel gyorsabb volt FORTH-ban a többi lehetőséghez képest.
Az elkészült program meglepően kevés memóriát igényelt. És ami talán a legfontosabb: az elkészült program sebessége 
a BASIC értelmező és az assembler fordító által előállított program sebessége között volt, mértani sorban kb. félúton.
Egy akkori tipikus hardveren másodpercenként néhány 100 BASIC programsor futott le, gépikódú utasításokból pedig néhány 100_000.
Ugyanakkor másodpercenként ~3_000 FORTH utasítást tudott ugyanaz a hardver végrehajtani.
Ha már a sebességnél tartunk:
Gépikód      PIC32MX7 sorozaton 80 MHz órajel mellett:   80_000_000 utasítás/másodperc.
Gépikód      PIC32MX2 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
StickOS      PIC32MX7 sorozaton 80 MHz órajel mellett:      113_000 utasítás/másodperc.
StickOS      PIC32MX2 sorozaton 40 MHz órajel mellett:       61_000 utasítás/másodperc.
DIOS Forth   PIC32MX7 sorozaton 80 MHz órajel mellett:    2_300_000 utasítás/másodperc.
ChipKitForth PIC32MX2 sorozaton 40 MHz órajel mellett:      760_000 utasítás/másodperc.

Az egyszerűbb összehasonlításhoz számoljuk át az értékeket 40 MHz órajelre:
Gépikód      PIC32MX7 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
Gépikód      PIC32MX2 sorozaton 40 MHz órajel mellett:   40_000_000 utasítás/másodperc.
StickOS      PIC32MX7 sorozaton 40 MHz órajel mellett:       56_500 utasítás/másodperc.
StickOS      PIC32MX2 sorozaton 40 MHz órajel mellett:       61_500 utasítás/másodperc.
DIOS Forth   PIC32MX7 sorozaton 40 MHz órajel mellett:    1_150_000 utasítás/másodperc.
ChipKitForth PIC32MX2 sorozaton 40 MHz órajel mellett:    1_245_000 utasítás/másodperc.

Gépikód/Basic:       677 
Gépikód/DIOSForth:    34
Gépikód/ChipKitForth: 32
DIOSForth/Basic:      19
ChipKitForth/Basic:   21

Látható, hogy - az egyébként jól használható - Basic-hez képest a Forth rendszerek 20 szoros sebesség növekedést jelentenek !

De mi az a ChipKitForth ? Erről eddig nem volt szó !
A ChipKitForth a DIOSForth-nak MPIDE alá adaptált változata.

Miért jó nekünk, ha CKF-et használunk?
HW:
PIC32MX250F128B ChipKit bootloaderrel ~1100 Ft
A többi passzív alkatrész:             ~500 Ft
                                    -----------
                                      ~1600 Ft
SW: 
MPIDE: 0 Ft                                      
CKF:   0 Ft

Ennyiért van egy komplett FORTH nyelven programozható kis mikrokontrolleres áramkörünk.
Innen kezdve csak a képzeletünk szab határokat.                                       
A FORTH-ban való programozáshoz szükségünk lesz egy soros terminál emulátor programra. 
PUTTY, TeraTerm, de akár az XP beépített HyperTerminálja is megfelelő.
Szabadon felhasználható RAM: ~12K.
Sebesség: ~ 1000000 utasítás/sec.















